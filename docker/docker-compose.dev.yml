# See:
# - https://wizarr.org/developer/setup
# - https://wizarr.org/developer/troubleshooting

name: wizarr-dev

services:
    wizarr:
        container_name: wizarr_server
        image: ghcr.io/wizarrrrr/base-server-dev:main
        build:
            context: ../
            dockerfile: apps/wizarr-backend/Dockerfile
            target: dev
        restart: always
        volumes:
            - ${DB_DIR}:/usr/wizarr/data/database
            - /etc/localtime:/etc/localtime:ro
        env_file:
            - example.env
        ports:
            - 5690:5690
            - 5173:5173
            - 5001:5001
        depends_on:
            - redis
            - postgres
        healthcheck:
            disable: false

    redis:
        container_name: wizarr_redis
        image: redis:alpine
        healthcheck:
            test: redis-cli ping || exit 1

    postgres:
        container_name: wizarr_postgres
        image: docker.io/tensorchord/pgvecto-rs:pg14-v0.2.0
        env_file:
            - .env
        environment:
            POSTGRES_PASSWORD: ${DB_PASSWORD}
            POSTGRES_USER: ${DB_USERNAME}
            POSTGRES_DB: ${DB_NAME}
            POSTGRES_INITDB_ARGS: "--data-checksums"
        volumes:
            - ${DB_DIR}:/var/lib/postgresql/data
        ports:
            - 5432:5432
        healthcheck:
            test: >-
                pg_isready --dbname="$${POSTGRES_DB}" --username="$${POSTGRES_USER}" || exit 1;
                Chksum="$$(psql --dbname="$${POSTGRES_DB}" --username="$${POSTGRES_USER}" --tuples-only --no-align
                --command='SELECT COALESCE(SUM(checksum_failures), 0) FROM pg_stat_database')";
                echo "checksum failure count is $$Chksum";
                [ "$$Chksum" = '0' ] || exit 1
            interval: 5m
            start_interval: 30s
            start_period: 5m
        command: >-
            postgres
            -c shared_preload_libraries=vectors.so
            -c 'search_path="$$user", public, vectors'
            -c logging_collector=on
            -c max_wal_size=2GB
            -c shared_buffers=512MB
            -c wal_compression=on

    memcached:
        container_name: wizarr_memcached
        restart: always
        image: "memcached:alpine"
        command:
            - --conn-limit=1024
            - --memory-limit=64
            - --threads=4
        healthcheck:
            test: echo stats | nc 127.0.0.1 11211
            interval: 20s
            timeout: 1s
            retries: 5

    s3:
        container_name: wizarr_s3
        restart: always
        image: zenko/cloudserver:latest
        ports:
            - "8000:8000"
        environment:
            S3METADATAPATH: /var/lib/s3/meta
            S3DATAPATH: /var/lib/s3/data
            REMOTE_MANAGEMENT_DISABLE: true
        volumes:
            - ${STORAGE_DIR}/meta:/var/lib/s3/meta
            - ${STORAGE_DIR}/data:/var/lib/s3/data

    # wizarr-prometheus:
    #   container_name:
    #   ports:
    #     - 9090:9090
    #   image: prom/prometheus
    #   volumes:
    #     - ./prometheus.yml:/etc/prometheus/prometheus.yml
    #     - prometheus-data:/prometheus

    # first login uses admin/admin
    # add data source for http://wizarr-prometheus:9090 to get started
    # wizarr-grafana:
    #   container_name: wizarr_grafana
    #   command: ['./run.sh', '-disable-reporting']
    #   ports:
    #     - 3000:3000
    #   image: grafana/grafana:10.3.3-ubuntu
    #   volumes:
    #     - grafana-data:/var/lib/grafana

volumes:
    prometheus-data:
    grafana-data:
