name: Docker Builds

on:
    workflow_run:
        workflows: ["Prepare new release"]
        types:
            - completed
    repository_dispatch:
        types: [trigger-docker-builds]

concurrency:
    group: ${{ github.workflow }}-${{ github.ref }}
    cancel-in-progress: true

env:
    REGISTRY: ghcr.io
    OWNER: ${{ github.repository_owner }}
    REPO_NAME: ${{ github.repository }}

# Critical permissions update
permissions:
    contents: read
    packages: write
    id-token: write # Required for GitHub OIDC token auth

jobs:
    pre-job:
        runs-on: ubuntu-latest
        outputs:
            version: ${{ steps.get-version.outputs.version }}
        steps:
            - name: Checkout repository
              uses: actions/checkout@v4

            - name: Get version from package.json
              id: get-version
              run: |
                  VERSION=$(jq -r '.version' package.json)
                  echo "version=${VERSION}" >> $GITHUB_OUTPUT
                  echo "Extracted version: ${VERSION}"

    build-frontend:
        needs: pre-job
        runs-on: ubuntu-latest
        env:
            image: wizarr-frontend
        steps:
            - name: Checkout repository
              uses: actions/checkout@v4

            - name: Log in to GitHub Container Registry
              uses: docker/login-action@v3
              with:
                  registry: ${{ env.REGISTRY }}
                  username: ${{ env.OWNER }}
                  password: ${{ secrets.GITHUB_TOKEN }}

            - name: Set up QEMU
              uses: docker/setup-qemu-action@v3.2.0

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v3.8.0
              with:
                  driver-opts: network=host

            - name: Generate docker image tags
              id: metadata
              uses: docker/metadata-action@v5
              with:
                  images: ${{ env.REGISTRY }}/${{ env.OWNER }}/wizarr-frontend
                  tags: |
                      type=raw,value=latest
                      type=raw,value=${{ needs.pre-job.outputs.version }}

            - name: Determine build cache output
              id: cache-target
              run: |
                  if [[ "${{ github.event_name }}" == "pull_request" ]]; then
                    echo "cache-to=type=local,dest=/tmp/discard,ignore-error=true" >> $GITHUB_OUTPUT
                  else
                    echo "cache-to=type=registry,mode=max,ref=${{ env.REGISTRY }}/${{ env.OWNER }}/wizarr-build-cache:${{ env.image }}" >> $GITHUB_OUTPUT
                  fi

            - name: Build and push frontend image
              uses: docker/build-push-action@v6.10.0
              with:
                  context: .
                  file: apps/wizarr-frontend/Dockerfile
                  platforms: linux/amd64,linux/arm64
                  cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.OWNER }}/wizarr-build-cache:${{ env.image }}
                  cache-to: ${{ steps.cache-target.outputs.cache-to }}
                  tags: ${{ steps.metadata.outputs.tags }}
                  labels: ${{ steps.metadata.outputs.labels }}
                  push: true
                  build-args: |
                      WIZARR_VERSION=${{ needs.pre-job.outputs.version }}
                      BUILD_ID=${{ github.run_id }}
                  target: frontend-prod

    build-backend:
        needs: pre-job
        runs-on: ubuntu-latest
        env:
            image: wizarr-backend
        steps:
            - name: Checkout repository
              uses: actions/checkout@v4

            - name: Log in to GitHub Container Registry
              uses: docker/login-action@v3
              with:
                  registry: ${{ env.REGISTRY }}
                  username: ${{ env.OWNER }}
                  password: ${{ secrets.GITHUB_TOKEN }}

            - name: Set up QEMU
              uses: docker/setup-qemu-action@v3.2.0

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v3.8.0
              with:
                  driver-opts: network=host

            - name: Generate docker image tags
              id: metadata
              uses: docker/metadata-action@v5
              with:
                  images: ${{ env.REGISTRY }}/${{ env.OWNER }}/wizarr-backend
                  tags: |
                      type=raw,value=latest
                      type=raw,value=${{ needs.pre-job.outputs.version }}

            - name: Determine build cache output
              id: cache-target
              run: |
                  if [[ "${{ github.event_name }}" == "pull_request" ]]; then
                    echo "cache-to=type=local,dest=/tmp/discard,ignore-error=true" >> $GITHUB_OUTPUT
                  else
                    echo "cache-to=type=registry,mode=max,ref=${{ env.REGISTRY }}/${{ env.OWNER }}/wizarr-build-cache:${{ env.image }}" >> $GITHUB_OUTPUT
                  fi

            - name: Build and push backend image
              uses: docker/build-push-action@v6.10.0
              with:
                  context: .
                  file: apps/wizarr-backend/Dockerfile
                  platforms: linux/amd64,linux/arm64
                  cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.OWNER }}/wizarr-build-cache:${{ env.image }}
                  cache-to: ${{ steps.cache-target.outputs.cache-to }}
                  tags: ${{ steps.metadata.outputs.tags }}
                  labels: ${{ steps.metadata.outputs.labels }}
                  push: true
                  build-args: |
                      WIZARR_VERSION=${{ needs.pre-job.outputs.version }}
                      BUILD_ID=${{ github.run_id }}
                  target: backend-prod

    success-check:
        name: Verify Build Success
        needs: [build-frontend, build-backend]
        runs-on: ubuntu-latest
        if: always()
        steps:
            - name: Check build results
              run: |
                  if ${{ contains(needs.*.result, 'failure') }}; then
                      echo "::error::Some builds failed"
                      exit 1
                  else
                      echo "All builds succeeded"
                  fi
