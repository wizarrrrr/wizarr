name: Docker

on:
    workflow_dispatch:
    push:
        branches: [master]
    pull_request:
        branches: [master]
    release:
        types: [published]

concurrency:
    group: ${{ github.workflow }}-${{ github.ref }}
    cancel-in-progress: true

permissions:
    packages: write

jobs:
    pre-job:
        runs-on: ubuntu-latest
        outputs:
            should_run_backend: ${{ steps.found_paths.outputs.backend == 'true' || steps.should_force.outputs.should_force == 'true' }}
            should_run_frontend: ${{ steps.found_paths.outputs.frontend == 'true' || steps.should_force.outputs.should_force == 'true' }}
        steps:
            - name: Checkout code
              uses: actions/checkout@v4
            - id: found_paths
              uses: dorny/paths-filter@v3
              with:
                  filters: |
                      backend:
                        - 'apps/wizarr-backend/**'
                        - 'apps/wizarr-backend'
                      frontend:
                        - 'apps/wizarr-frontend/**'
                        - 'apps/wizarr-frontend'
            - name: Check if we should force jobs to run
              id: should_force
              run: echo "should_force=${{ github.event_name == 'workflow_dispatch' || github.event_name == 'release' }}" >> "$GITHUB_OUTPUT"

    retag:
        name: Re-Tag ${{ matrix.app }}
        needs: pre-job
        if: ${{ !github.event.pull_request.head.repo.fork }}
        runs-on: ubuntu-latest
        strategy:
            matrix:
                app: [backend, frontend]
                suffix: [""]
                include:
                    - app: backend
                      repository: wizarr-backend
                    - app: frontend
                      repository: wizarr-frontend
        steps:
            - name: Check if we should run for this app
              id: check_run
              run: |
                  if [[ (${{ needs.pre-job.outputs.should_run_backend }} == 'false' && "${{ matrix.app }}" == "backend") || (${{ needs.pre-job.outputs.should_run_frontend }} == 'false' && "${{ matrix.app }}" == "frontend") ]]; then
                    echo "should_run=true" >> $GITHUB_OUTPUT
                  else
                    echo "should_run=false" >> $GITHUB_OUTPUT
                  fi

            - name: Login to GitHub Container Registry
              if: steps.check_run.outputs.should_run == 'true'
              uses: docker/login-action@v3
              with:
                  registry: ghcr.io
                  username: ${{ github.repository_owner }}
                  password: ${{ secrets.GITHUB_TOKEN }}

            - name: Re-tag image
              if: steps.check_run.outputs.should_run == 'true'
              run: |
                  REGISTRY_NAME="ghcr.io"
                  REPOSITORY=${{ github.repository_owner }}/${{ matrix.repository }}
                  TAG_OLD=master${{ matrix.suffix }}
                  TAG_NEW=${{ github.event.number == 0 && github.ref_name || format('pr-{0}', github.event.number) }}${{ matrix.suffix }}
                  docker buildx imagetools create -t $REGISTRY_NAME/$REPOSITORY:$TAG_NEW $REGISTRY_NAME/$REPOSITORY:$TAG_OLD

    build_and_push:
        name: Build and Push ${{ matrix.app }}
        runs-on: ubuntu-latest
        needs: pre-job
        strategy:
            fail-fast: false
            matrix:
                app: [backend, frontend]
                include:
                    - app: backend
                      image: wizarr-backend
                      file: apps/wizarr-backend/Dockerfile
                      platforms: linux/amd64,linux/arm64
                      device: cpu
                    - app: frontend
                      image: wizarr-frontend
                      file: apps/wizarr-frontend/Dockerfile
                      platforms: linux/amd64,linux/arm64
                      device: cpu
        env:
            context: .
        steps:
            - name: Check if we should run for this app
              id: check_run
              run: |
                  if [[ (${{ needs.pre-job.outputs.should_run_backend }} == 'true' && "${{ matrix.app }}" == "backend") || (${{ needs.pre-job.outputs.should_run_frontend }} == 'true' && "${{ matrix.app }}" == "frontend") ]]; then
                    echo "should_run=true" >> $GITHUB_OUTPUT
                  else
                    echo "should_run=false" >> $GITHUB_OUTPUT
                  fi

            - name: Checkout
              if: steps.check_run.outputs.should_run == 'true'
              uses: actions/checkout@v4

            - name: Set up QEMU
              if: steps.check_run.outputs.should_run == 'true'
              uses: docker/setup-qemu-action@v3.2.0

            - name: Set up Docker Buildx
              if: steps.check_run.outputs.should_run == 'true'
              uses: docker/setup-buildx-action@v3.8.0

            - name: Login to Docker Hub
              if: steps.check_run.outputs.should_run == 'true' && github.event_name == 'release'
              uses: docker/login-action@v3
              with:
                  username: ${{ secrets.DOCKERHUB_USERNAME }}
                  password: ${{ secrets.DOCKERHUB_TOKEN }}

            - name: Login to GitHub Container Registry
              if: steps.check_run.outputs.should_run == 'true' && !github.event.pull_request.head.repo.fork
              uses: docker/login-action@v3
              with:
                  registry: ghcr.io
                  username: ${{ github.repository_owner }}
                  password: ${{ secrets.GITHUB_TOKEN }}

            - name: Generate docker image tags
              if: steps.check_run.outputs.should_run == 'true'
              id: metadata
              uses: docker/metadata-action@v5
              with:
                  flavor: |
                      latest=false
                  images: |
                      name=ghcr.io/${{ github.repository_owner }}/${{ matrix.image }}
                  tags: |
                      type=ref,event=branch
                      type=ref,event=pr
                      type=ref,event=tag
                      type=raw,value=release,enable=${{ github.event_name == 'release' }}

            - name: Determine build cache output
              if: steps.check_run.outputs.should_run == 'true'
              id: cache-target
              run: |
                  if [[ "${{ github.event_name }}" == "pull_request" ]]; then
                    echo "cache-to=type=local,dest=/tmp/discard,ignore-error=true" >> $GITHUB_OUTPUT
                  else
                    echo "cache-to=type=registry,mode=max,ref=ghcr.io/${{ github.repository_owner }}/${{ matrix.image }}-build-cache" >> $GITHUB_OUTPUT
                  fi

            - name: Build and push image
              if: steps.check_run.outputs.should_run == 'true'
              uses: docker/build-push-action@v6.10.0
              with:
                  context: ${{ env.context }}
                  file: ${{ matrix.file }}
                  platforms: ${{ matrix.platforms }}
                  push: ${{ !github.event.pull_request.head.repo.fork }}
                  cache-from: type=registry,ref=ghcr.io/${{ github.repository_owner }}/${{ matrix.image }}-build-cache
                  cache-to: ${{ steps.cache-target.outputs.cache-to }}
                  tags: ${{ steps.metadata.outputs.tags }}
                  labels: ${{ steps.metadata.outputs.labels }}
                  build-args: |
                      DEVICE=${{ matrix.device }}
                      BUILD_ID=${{ github.run_id }}
                      BUILD_IMAGE=${{ github.event_name == 'release' && github.ref_name || steps.metadata.outputs.tags }}
                      BUILD_SOURCE_REF=${{ github.ref_name }}
                      BUILD_SOURCE_COMMIT=${{ github.sha }}
                  target: prod

    success-check:
        name: Docker Build & Push Success
        needs: [build_and_push, retag]
        runs-on: ubuntu-latest
        if: always()
        steps:
            - name: Any jobs failed?
              if: ${{ contains(needs.*.result, 'failure') }}
              run: exit 1
            - name: All jobs passed or skipped
              if: ${{ !(contains(needs.*.result, 'failure')) }}
              run: echo "All jobs passed or skipped" && echo "${{ toJSON(needs.*.result) }}"
