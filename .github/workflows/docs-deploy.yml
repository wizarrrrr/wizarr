name: Docs deploy
on:
    workflow_run:
        workflows: ["Docs build"]
        types:
            - completed

jobs:
    checks:
        name: Docs Deploy Checks
        runs-on: ubuntu-latest
        outputs:
            parameters: ${{ steps.parameters.outputs.result }}
            artifact: ${{ steps.get-artifact.outputs.result }}
        steps:
            - if: ${{ github.event.workflow_run.conclusion != 'success' }}
              run: echo 'The triggering workflow did not succeed' && exit 1
            - name: Get artifact
              id: get-artifact
              uses: actions/github-script@v7
              with:
                  script: |
                      // List all artifacts for the workflow run
                      const { data: { artifacts } } = await github.rest.actions.listWorkflowRunArtifacts({
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        run_id: context.payload.workflow_run.id,
                      });

                      // Find the artifact named "docs-build-output"
                      const matchArtifact = artifacts.find(artifact => artifact.name === "docs-build-output");

                      if (!matchArtifact) {
                        console.log("No artifact found with the name docs-build-output, build job was skipped");
                        return { found: false };
                      }

                      return { found: true, id: matchArtifact.id };

            - name: Determine deploy parameters
              id: parameters
              uses: actions/github-script@v7
              with:
                  script: |
                      // Extract event type and fork status
                      const eventType = context.payload.workflow_run.event;
                      const isFork = context.payload.workflow_run.repository.fork;

                      let parameters;
                      console.log({eventType, isFork});

                      // Handle push events
                      if (eventType == "push") {
                        const branch = context.payload.workflow_run.head_branch;
                        console.log({branch});
                        const shouldDeploy = !isFork && branch == "master";
                        parameters = {
                          event: "branch",
                          name: "master",
                          shouldDeploy
                        };
                      // Handle pull request events
                      } else if (eventType == "pull_request") {
                        let pull_number = context.payload.workflow_run.pull_requests[0]?.number;
                        if (!pull_number) {
                          const response = await github.rest.search.issuesAndPullRequests({
                            q: `repo:${context.repo.owner}/${context.repo.repo} is:pr sha:${context.payload.workflow_run.head_sha}`,
                            per_page: 1,
                          });
                          const items = response.data.items;
                          if (items.length < 1) {
                            throw new Error("No pull request found for the commit");
                          }
                          pull_number = items[0].number;
                        }
                        const { data: pr } = await github.rest.pulls.get({
                          owner: context.repo.owner,
                          repo: context.repo.repo,
                          pull_number
                        });
                        console.log({ pull_number });
                        parameters = {
                          event: "pr",
                          name: `pr-${pull_number}`,
                          pr_number: pull_number,
                          shouldDeploy: true
                        };
                      // Handle release events
                      } else if (eventType == "release") {
                        parameters = {
                          event: "release",
                          name: context.payload.workflow_run.head_branch,
                          shouldDeploy: !isFork
                        };
                      }

                      console.log(parameters);
                      return parameters;

    deploy:
        name: Docs Deploy
        runs-on: ubuntu-latest
        needs: checks
        if: ${{ fromJson(needs.checks.outputs.artifact).found && fromJson(needs.checks.outputs.parameters).shouldDeploy }}
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Load parameters
              id: parameters
              uses: actions/github-script@v7
              with:
                  script: |
                      const json = `${{ needs.checks.outputs.parameters }}`;
                      const parameters = JSON.parse(json);
                      core.setOutput("event", parameters.event);
                      core.setOutput("name", parameters.name);
                      core.setOutput("shouldDeploy", parameters.shouldDeploy);

            - run: |
                  echo "Starting docs deployment for ${{ steps.parameters.outputs.event }} ${{ steps.parameters.outputs.name }}"

            - name: Download artifact
              uses: actions/github-script@v7
              with:
                  script: |
                      let artifact = ${{ needs.checks.outputs.artifact }};
                      let download = await github.rest.actions.downloadArtifact({
                         owner: context.repo.owner,
                         repo: context.repo.repo,
                         artifact_id: artifact.id,
                         archive_format: 'zip',
                      });
                      let fs = require('fs');
                      fs.writeFileSync(`${process.env.GITHUB_WORKSPACE}/docs-build-output.zip`, Buffer.from(download.data));

            - name: Unzip artifact
              run: unzip "${{ github.workspace }}/docs-build-output.zip" -d "${{ github.workspace }}/docs/build"

            - name: Publish to Cloudflare Pages
              uses: cloudflare/pages-action@v1
              with:
                  apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
                  accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
                  projectName: ${{ fromJson(steps.clean.outputs.output).pages_project_name.value }}
                  workingDirectory: "docs"
                  directory: "build"
                  branch: ${{ steps.parameters.outputs.name }}
                  wranglerVersion: "3"
